Component Begin Overlap:
NotifyComponentBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor,
	                                        UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep,
	                                        const FHitResult& SweepResult);

Component End Overlap:
NotifyComponentEndOverlap(UPrimitiveComponent* OverlappedComp,
		AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

AIController C++:
- Go to Project.build.cs
- Add "AIModule" to "PublicDependencyModuleNames"

To Use AAIController Function "MoveTo":
- Create struct FAIMoveRequest
- Add To Created struct Destination (actor or location)
- Set bool In Created struct SetUsePathfinding(true) to true

Add Components At Run Time:
- NewComponent = NewObject<UClass>(AParent, UClass::StaticClass(), "Name");
- NewComponent->SetupAttachment(AParent);
- NewComponent->RegisterComponent(); // Always After Attachment or Later
- GetOwner()->AddInstanceComponent(NewComponent); // To Apear Component In Runtime List

To Use WidgetComponents In C++:
- Add "UMG" to "PublicDependencyModuleNames"

Forward declaration (Circular Dependency):
- In header create needed class under includes 
	...
	#include "Class_01.generated.h"
	class Class_02;
- In CPP file include needed class file;
	#include "Class_02.h"

Implement C++ Interface in Blueprint:
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent)
	void Interact();
	virtual void Interact_Implementation();

Smoothly Changing Actor:
- UGameplayStatics::GetPlayerController(this, 0)->SetViewTargetWithBlend(this, 2, VTBlend_EaseInOut, 2.f );
